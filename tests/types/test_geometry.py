from io import BytesIO
import random
#
import pytest
from pyhdb.protocol import types

# ########################## Test value unpacking #####################################

@pytest.mark.parametrize("given,expected", [
    (b"\xFF", None),
    (b"\x2d\x50\x4f\x49\x4e\x54\x20\x28\x31\x2e\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x32\x2e\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29",
     "POINT (1.0000000000000000 2.0000000000000000)"),
    (b"\x59\x4c\x49\x4e\x45\x53\x54\x52\x49\x4e\x47\x20\x28\x31\x2e\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x32\x2e" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c" + \
     b"\x20\x32\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x29",
     "LINESTRING (1.0000000000000000 2.0000000000000000, " + \
     "2.0000000000000000 1.0000000000000000)"),
    (b"\xa7\x50\x4f\x4c\x59\x47\x4f\x4e\x20\x28\x28\x31\x2e\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20\x30" + \
     b"\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x20\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x2c\x20\x2d\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20\x31\x2e\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29\x29",
     "POLYGON ((1.0000000000000000 1.0000000000000000, " + \
     "0.0000000000000000 0.0000000000000000, " + \
     "-1.0000000000000000 1.0000000000000000, " + \
     "1.0000000000000000 1.0000000000000000))"),
    (b"\x32\x4d\x55\x4c\x54\x49\x50\x4f\x49\x4e\x54\x20\x28\x31\x2e\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x32\x2e" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29",
     "MULTIPOINT (1.0000000000000000 2.0000000000000000)"),
    (b"\x60\x4d\x55\x4c\x54\x49\x4c\x49\x4e\x45\x53\x54\x52\x49\x4e\x47\x20" + \
     b"\x28\x28\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x20\x32\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x2c\x20\x32\x2e\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29\x29",
     "MULTILINESTRING ((1.0000000000000000 2.0000000000000000, " + \
     "2.0000000000000000 1.0000000000000000))"),
    (b"\xae\x4d\x55\x4c\x54\x49\x50\x4f\x4c\x59\x47\x4f\x4e\x20\x28\x28\x28" + \
     b"\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x2c\x20\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x20\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20\x2d\x31\x2e\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20\x31" + \
     b"\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x29\x29\x29",
     "MULTIPOLYGON (((1.0000000000000000 1.0000000000000000, " + \
     "0.0000000000000000 0.0000000000000000, " + \
     "-1.0000000000000000 1.0000000000000000, " + \
     "1.0000000000000000 1.0000000000000000)))"),
])
def test_unpack_geometry_wkt(given, expected):
    given = BytesIO(given)
    assert types.Geometry.from_resultset(given) == expected


# ########################## Test value packing #####################################

@pytest.mark.parametrize("given,expected", [
    (None, b"\x1d\xFF", ),
    ("POINT (1.0000000000000000 2.0000000000000000)",
     b"\x1d\x2d\x50\x4f\x49\x4e\x54\x20\x28\x31\x2e\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x32\x2e\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29"),
    ("LINESTRING (1.0000000000000000 2.0000000000000000, " + \
     "2.0000000000000000 1.0000000000000000)",
     b"\x1d\x59\x4c\x49\x4e\x45\x53\x54\x52\x49\x4e\x47\x20\x28\x31\x2e\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x32" + \
     b"\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x2c\x20\x32\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x29"),
    ("POLYGON ((1.0000000000000000 1.0000000000000000, " + \
     "0.0000000000000000 0.0000000000000000, " + \
     "-1.0000000000000000 1.0000000000000000, " + \
     "1.0000000000000000 1.0000000000000000))",
     b"\x1d\xa7\x50\x4f\x4c\x59\x47\x4f\x4e\x20\x28\x28\x31\x2e\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20" + \
     b"\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x20\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x2c\x20\x2d\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20\x31\x2e\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29\x29"),
    ("MULTIPOINT (1.0000000000000000 2.0000000000000000)",
     b"\x1d\x32\x4d\x55\x4c\x54\x49\x50\x4f\x49\x4e\x54\x20\x28\x31\x2e\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x32" + \
     b"\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29"),
    ("MULTILINESTRING ((1.0000000000000000 2.0000000000000000, " + \
     "2.0000000000000000 1.0000000000000000))",
     b"\x1d\x60\x4d\x55\x4c\x54\x49\x4c\x49\x4e\x45\x53\x54\x52\x49\x4e\x47" + \
     b"\x20\x28\x28\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x20\x32\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x2c\x20\x32\x2e\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x29\x29"),
    ("MULTIPOLYGON (((1.0000000000000000 1.0000000000000000, " + \
     "0.0000000000000000 0.0000000000000000, " + \
     "-1.0000000000000000 1.0000000000000000, " + \
     "1.0000000000000000 1.0000000000000000)))",
     b"\x1d\xae\x4d\x55\x4c\x54\x49\x50\x4f\x4c\x59\x47\x4f\x4e\x20\x28\x28" + \
     b"\x28\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x2c\x20\x30\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x20\x30\x2e\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20\x2d\x31\x2e\x30\x30\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x20\x31\x2e\x30" + \
     b"\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x2c\x20" + \
     b"\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x20\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30" + \
     b"\x30\x30\x30\x29\x29\x29"),
])
def test_pack_geometry_wkt(given, expected):
    assert types.Geometry.prepare(given) == expected


# #############################################################################################################
#                         Real HANA interaction with geormetry (integration tests)
# #############################################################################################################

import tests.helper
TABLE = 'PYHDB_TEST_GEOMETRY'
TABLE_POINT = TABLE + "_POINT"
TABLE_GEOMETRY = TABLE + "_GEOMETRY"
TABLE_FIELDS_POINT = "point ST_POINT NOT NULL"
TABLE_FIELDS_GEOMETRY = "geo ST_GEOMETRY NOT NULL"

@pytest.fixture
def test_table_point(request, connection):
    tests.helper.create_table_fixture(request, connection, TABLE_POINT,
                                      TABLE_FIELDS_POINT, column_table=True)

@pytest.fixture
def test_table_geometry(request, connection):
    tests.helper.create_table_fixture(request, connection, TABLE_GEOMETRY,
                                      TABLE_FIELDS_GEOMETRY, column_table=True)


@pytest.mark.hanatest
def test_insert_point(connection, test_table_point):
    """Insert spatial point into table"""
    cursor = connection.cursor()
    point_x = random.randint(-100.0, 100.0)
    point_y = random.randint(-100.0, 100.0)
    wkt_string = "POINT(%f %f)" % (point_x, point_y)
    cursor.execute("insert into %s (point) values (:1)" % TABLE_POINT, [wkt_string])
    connection.commit()
    cursor = connection.cursor()
    row = cursor.execute('select point.ST_X(), point.ST_Y() from %s' % TABLE_POINT).fetchone()
    assert row[0] == point_x
    assert row[1] == point_y


@pytest.mark.hanatest
def test_insert_linestring(connection, test_table_geometry):
    """Insert spatial linestring into table"""
    cursor = connection.cursor()
    point1_x = random.randint(-100.0, 100.0)
    point1_y = random.randint(-100.0, 100.0)
    point2_x = random.randint(-100.0, 100.0)
    point2_y = random.randint(-100.0, 100.0)
    wkt_string = "LINESTRING(%f %f, %f %f)" % (point1_x, point1_y, point2_x, point2_y)
    cursor.execute("insert into %s (geo) values (:1)" % TABLE_GEOMETRY, [wkt_string])
    connection.commit()
    cursor = connection.cursor()
    sql = """
        Select geo.ST_StartPoint().ST_X(), geo.ST_StartPoint().ST_Y(),
               geo.ST_EndPoint().ST_X(), geo.ST_EndPoint().ST_Y()
        From %s
    """
    row = cursor.execute(sql % TABLE_GEOMETRY).fetchone()
    assert row[0] == point1_x
    assert row[1] == point1_y
    assert row[2] == point2_x
    assert row[3] == point2_y


@pytest.mark.hanatest
def test_insert_polygon(connection, test_table_geometry):
    """Insert spatial polygon into table"""
    cursor = connection.cursor()
    # The edges of a polygon can not cross. Therefore we build an arbitrary quadtrangle.
    point1_x = random.randint(0, 100.0)
    point1_y = random.randint(0, 100.0)
    point2_x = random.randint(0, 100.0)
    point2_y = random.randint(-100.0, 0)
    point3_x = random.randint(-100.0, 0)
    point3_y = random.randint(-100.0, 0)
    point4_x = random.randint(-100.0, 0)
    point4_y = random.randint(0, 100.0)
    wkt_string = "POLYGON((%f %f, %f %f, %f %f, %f %f, %f %f))" % (
                    point1_x, point1_y, point2_x, point2_y, point3_x, point3_y,
                    point4_x, point4_y, point1_x, point1_y
                 )
    cursor.execute("insert into %s (geo) values (:1)" % TABLE_GEOMETRY, [wkt_string])
    connection.commit()
    cursor = connection.cursor()
    # We don't want to check all points of the polygon.
    # We will only check the minimal and maximal values.
    sql = """
        Select geo.ST_XMin(), geo.ST_XMax(), geo.ST_YMin(), geo.ST_YMax()
        From %s
    """
    row = cursor.execute(sql % TABLE_GEOMETRY).fetchone()
    assert row[0] == min(point1_x, point2_x, point3_x, point4_x)
    assert row[1] == max(point1_x, point2_x, point3_x, point4_x)
    assert row[2] == min(point1_y, point2_y, point3_y, point4_y)
    assert row[3] == max(point1_y, point2_y, point3_y, point4_y)
